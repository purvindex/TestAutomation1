{"name": "test_ContractorPOCRole", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\PurviDholakia\\python_selenium_project\\File_Tobe_Upload\\Valid_FormS.txt\n  (Session info: chrome=125.0.6422.60)\nStacktrace:\n\tGetHandleVerifier [0x00007FF63D5B22C2+60002]\n\t(No symbol) [0x00007FF63D52CA59]\n\t(No symbol) [0x00007FF63D3E7EDA]\n\t(No symbol) [0x00007FF63D4302E8]\n\t(No symbol) [0x00007FF63D45C28A]\n\t(No symbol) [0x00007FF63D42ADF6]\n\t(No symbol) [0x00007FF63D45C4A0]\n\t(No symbol) [0x00007FF63D47BCC7]\n\t(No symbol) [0x00007FF63D45C033]\n\t(No symbol) [0x00007FF63D429657]\n\t(No symbol) [0x00007FF63D42A251]\n\tGetHandleVerifier [0x00007FF63D8C3E2D+3278285]\n\tGetHandleVerifier [0x00007FF63D910190+3590448]\n\tGetHandleVerifier [0x00007FF63D9061D0+3549552]\n\tGetHandleVerifier [0x00007FF63D661DE6+779654]\n\t(No symbol) [0x00007FF63D537ACF]\n\t(No symbol) [0x00007FF63D532EE4]\n\t(No symbol) [0x00007FF63D533072]\n\t(No symbol) [0x00007FF63D522C4F]\n\tBaseThreadInitThunk [0x00007FFC212D257D+29]\n\tRtlUserThreadStart [0x00007FFC22D8AA48+40]", "trace": "self = <testCases.test_RBAC_Validation.Test_RBACValidation testMethod=test_ContractorPOCRole>\n\n    @pytest.mark.regression\n    def test_ContractorPOCRole(self):\n        homePage = HomePage(self.driver)\n        RBACPage = RBACValidationPage(self.driver)\n        fileUploadPage = FileUploadPage(self.driver)\n        fileStatusPage = FileStatusPage(self.driver)\n        RBACPage.enter_username(\"POC_DEV\")\n        RBACPage.enter_password(\"Contractor_112723\")\n        #RBACPage.enter_username(\"PDPOC_VAL\")\n        #RBACPage.enter_password(\"Crowd_dev_112723\")\n        homePage.loadApplication()\n        fileUploadPage.click_OnFileUpload()\n>       fileUploadPage.fileUpload_withAcceptedStatus()\n\ntestCases\\test_RBAC_Validation.py:51: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\FileUploadPage.py:77: in fileUpload_withAcceptedStatus\n    fileBrowse.send_keys(os.path.abspath(r\"..\\File_Tobe_Upload\\Valid_FormS.txt\"))\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000023D96AAA9F0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...07FF63D522C4F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFC212D257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFC22D8AA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\PurviDholakia\\python_selenium_project\\File_Tobe_Upload\\Valid_FormS.txt\nE         (Session info: chrome=125.0.6422.60)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF63D5B22C2+60002]\nE       \t(No symbol) [0x00007FF63D52CA59]\nE       \t(No symbol) [0x00007FF63D3E7EDA]\nE       \t(No symbol) [0x00007FF63D4302E8]\nE       \t(No symbol) [0x00007FF63D45C28A]\nE       \t(No symbol) [0x00007FF63D42ADF6]\nE       \t(No symbol) [0x00007FF63D45C4A0]\nE       \t(No symbol) [0x00007FF63D47BCC7]\nE       \t(No symbol) [0x00007FF63D45C033]\nE       \t(No symbol) [0x00007FF63D429657]\nE       \t(No symbol) [0x00007FF63D42A251]\nE       \tGetHandleVerifier [0x00007FF63D8C3E2D+3278285]\nE       \tGetHandleVerifier [0x00007FF63D910190+3590448]\nE       \tGetHandleVerifier [0x00007FF63D9061D0+3549552]\nE       \tGetHandleVerifier [0x00007FF63D661DE6+779654]\nE       \t(No symbol) [0x00007FF63D537ACF]\nE       \t(No symbol) [0x00007FF63D532EE4]\nE       \t(No symbol) [0x00007FF63D533072]\nE       \t(No symbol) [0x00007FF63D522C4F]\nE       \tBaseThreadInitThunk [0x00007FFC212D257D+29]\nE       \tRtlUserThreadStart [0x00007FFC22D8AA48+40]\n\nmyenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "attachments": [{"name": "Failed Screenshot", "source": "6a21c1b9-9c9f-451a-a5b7-ffe39ec62b83-attachment.png", "type": "image/png"}], "start": 1716259780363, "stop": 1716259824337, "uuid": "e1e5042f-d49d-4ce8-ad8a-7a9cbcdedee6", "historyId": "8417d365edd62a6786e3b3567b9bdfa7", "testCaseId": "8417d365edd62a6786e3b3567b9bdfa7", "fullName": "testCases.test_RBAC_Validation.Test_RBACValidation#test_ContractorPOCRole", "labels": [{"name": "tag", "value": "regression"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setupandteardown')"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_RBAC_Validation"}, {"name": "subSuite", "value": "Test_RBACValidation"}, {"name": "host", "value": "DESKTOP-F44E24H"}, {"name": "thread", "value": "3688-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_RBAC_Validation"}]}